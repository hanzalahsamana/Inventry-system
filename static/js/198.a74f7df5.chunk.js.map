{"version":3,"file":"static/js/198.a74f7df5.chunk.js","mappings":"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","sources":["assets/images/bg/login-bg-right.svg","assets/images/bg/login-bgleft.svg","layouts/logo/AuthLogo.js","views/auth/RegisterFormik.js"],"sourcesContent":["var _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLoginBgRight(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 235,\n    height: 255,\n    viewBox: \"0 0 235 255\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M68.0998 80.8352C29.568 58.8255 50.7474 26.3993 66.1536 12.9374L221.331 57.3035L173.743 227.335C119.588 252.59 90.715 235.279 83.0476 223.467C77.2742 209.877 90.3539 183.104 97.6153 171.416C117.578 148.566 120.185 122.853 118.994 112.853C112.554 93.0899 82.3813 83.2732 68.0998 80.8352Z\",\n    fill: \"#62CFF1\",\n    fillOpacity: 0.5\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M88 72C43.2 60 55.3333 19 67 0L235 1V197C187.8 240.2 154 230.333 143 220C133.4 207.2 139 174.667 143 160C156.6 129.6 152 101.333 148 91C136 71.8 103 70.3333 88 72Z\",\n    fill: \"#62CFF1\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoginBgRight);\nexport default __webpack_public_path__ + \"static/media/login-bg-right.8db5a9fe4230b1996c1088f3c72a1eb1.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLoginBgleft(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 376,\n    height: 317,\n    viewBox: \"0 0 376 317\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M98 59.596C70 -2.00401 21 -4.07068 0 2.59599V316.596L375 315.596C377.4 234.796 297 180.263 257 165.596C215.667 155.929 126 121.196 98 59.596Z\",\n    fill: \"#2B87F3\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoginBgleft);\nexport default __webpack_public_path__ + \"static/media/login-bgleft.86cfa8964ef473760adbe3b9a05e7377.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { ReactComponent as LogoDarkIcon } from '../../assets/images/logos/dark-logo-icon.svg';\r\nimport { ReactComponent as LogoDarkText } from '../../assets/images/logos/dark-logo-text.svg';\r\nimport { ReactComponent as LogoWhiteIcon } from '../../assets/images/logos/white-logo-icon.svg';\r\nimport { ReactComponent as LogoWhiteText } from '../../assets/images/logos/white-logo-text.svg';\r\n\r\nconst AuthLogo = () => {\r\n  const isDarkMode = useSelector((state) => state.customizer.isDark);\r\n\r\n  return (\r\n    <div className=\"p-4 d-flex justify-content-center gap-2\">\r\n      {isDarkMode !== false ? (\r\n        <>\r\n          <LogoWhiteIcon />\r\n          <LogoWhiteText />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <LogoDarkIcon />\r\n          <LogoDarkText />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthLogo;\r\n","import React from 'react';\r\nimport { Button, Label, FormGroup, Container, Row, Col, Card, CardBody } from 'reactstrap';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\nimport AuthLogo from '../../layouts/logo/AuthLogo';\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\n\r\nconst RegisterFormik = () => {\r\n  const initialValues = {\r\n    UserName: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    acceptTerms: false,\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    UserName: Yup.string().required('UserName is required'),\r\n    email: Yup.string().email('Email is invalid').required('Email is required'),\r\n    password: Yup.string()\r\n      .min(6, 'Password must be at least 6 characters')\r\n      .required('Password is required'),\r\n    confirmPassword: Yup.string()\r\n      .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n      .required('Confirm Password is required'),\r\n    acceptTerms: Yup.bool().oneOf([true], 'Accept Terms & Conditions is required'),\r\n  });\r\n\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <AuthLogo />\r\n            <Card>\r\n              <CardBody className=\"p-4 m-1\">\r\n                <h4 className=\"mb-0 fw-bold\">Register</h4>\r\n                <small className=\"pb-4 d-block\">\r\n                  Already have an account? <Link to=\"/loginformik\">Login</Link>\r\n                </small>\r\n                <Formik\r\n                  initialValues={initialValues}\r\n                  validationSchema={validationSchema}\r\n                  onSubmit={(fields) => {\r\n                    // eslint-disable-next-line no-alert\r\n                    alert(`SUCCESS!! :-)\\n\\n${JSON.stringify(fields, null, 4)}`);\r\n                  }}\r\n                  render={({ errors, touched }) => (\r\n                    <Form>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"firstName\">User Name</Label>\r\n                        <Field\r\n                          name=\"UserName\"\r\n                          type=\"text\"\r\n                          className={`form-control ${\r\n                            errors.UserName && touched.UserName ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"UserName\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"email\">Email</Label>\r\n                        <Field\r\n                          name=\"email\"\r\n                          type=\"text\"\r\n                          className={`form-control${\r\n                            errors.email && touched.email ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"password\">Password</Label>\r\n                        <Field\r\n                          name=\"password\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.password && touched.password ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"password\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\r\n                        <Field\r\n                          name=\"confirmPassword\"\r\n                          type=\"password\"\r\n                          className={`form-control${\r\n                            errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <ErrorMessage\r\n                          name=\"confirmPassword\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup inline className=\"form-check\">\r\n                        <Field\r\n                          type=\"checkbox\"\r\n                          name=\"acceptTerms\"\r\n                          id=\"acceptTerms\"\r\n                          className={`form-check-input ${\r\n                            errors.acceptTerms && touched.acceptTerms ? ' is-invalid' : ''\r\n                          }`}\r\n                        />\r\n                        <Label htmlFor=\"acceptTerms\" className=\"form-check-label\">\r\n                          Accept Terms & Conditions\r\n                        </Label>\r\n                        <ErrorMessage\r\n                          name=\"acceptTerms\"\r\n                          component=\"div\"\r\n                          className=\"invalid-feedback\"\r\n                        />\r\n                      </FormGroup>\r\n                      <FormGroup>\r\n                        <Button type=\"submit\" color=\"primary\" className=\"me-2\">\r\n                          Register\r\n                        </Button>\r\n                        <Button type=\"reset\" color=\"secondary\">\r\n                          Reset\r\n                        </Button>\r\n                      </FormGroup>\r\n                    </Form>\r\n                  )}\r\n                />\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RegisterFormik;\r\n"],"names":["_path","_path2","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgLoginBgRight","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","fillOpacity","ForwardRef","SvgLoginBgleft","AuthLogo","isDarkMode","useSelector","state","customizer","isDark","_jsx","className","children","_jsxs","_Fragment","LogoWhiteIcon","LogoWhiteText","LogoDarkIcon","LogoDarkText","RegisterFormik","validationSchema","Yup","shape","UserName","required","email","password","min","confirmPassword","oneOf","acceptTerms","LeftBg","RightBg","Container","fluid","Row","Col","lg","Card","CardBody","Link","to","Formik","initialValues","onSubmit","fields","alert","concat","JSON","stringify","render","errors","touched","Form","FormGroup","Label","htmlFor","Field","name","type","ErrorMessage","component","inline","Button","color"],"sourceRoot":""}